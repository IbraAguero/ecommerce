// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}


model User {
  id        String   @id @default(uuid())
  name      String
  lastName  String
  email     String   @unique
  phone     String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  orders Order[]
  addresses Address[]

  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
}

model Product {
  id          String @id @default(uuid())
  name        String
  slug        String @unique
  description String
  images      String[]
  brand       String
  categoryId  String
  isAvailable Boolean @default(true)


  variants    ProductVariant[]
  category    Category @relation(fields: [categoryId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id          String @id @default(uuid())
  productId   String
  size        String
  color       String
  colorHex    String @default("#FFFF")
  stock       Int   @default(0)
  price       Float
  discountedPrice Float?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])

  variantId  String
  variant    ProductVariant  @relation(fields: [variantId], references: [id])

  quantity   Int
  price      Decimal
}

model Order {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  items        OrderItem[]
  totalAmount  Decimal
  status       OrderStatus @default(PENDING)
  addressId    String

  address      Address     @relation(fields: [addressId], references: [id])
  payment      Payment? 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Address {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  country   String
  zipCode   String

  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id         String       @id @default(uuid())
  orderId    String       @unique
  order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount     Float

  method     PaymentMethod
  status     PaymentStatus @default(PENDING)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

